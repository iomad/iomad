{"version":3,"sources":["../../src/grades/grader.js"],"names":["templateNames","contentRegion","getContentForUserIdFunction","cmid","experimentalDisplayMode","userid","Repository","getDiscussionByUserID","then","context","discussions","map","discussionPostMapper","experimentaldisplaymode","Templates","render","catch","Notification","exception","getUsersForCmidFunction","groupID","CourseRepository","getUsersFromCourseModuleID","users","findGradableNode","node","closest","Selectors","gradableItem","discussion","parentMap","Map","posts","parentposts","forEach","post","set","id","userPosts","userposts","readonly","hasreplies","replies","parent","parentid","get","parentauthorname","author","fullname","launchWholeForumGrading","rootNode","focusOnClose","data","dataset","Grader","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","gradingPanelFunctions","group","launch","getter","setter","groupid","initialUserId","initialuserid","moduleName","name","courseName","courseUrl","courseId","sendStudentNotifications","launchViewGrading","view","registerLaunchListeners","document","addEventListener","e","target","matches","Error","gradableItems","wholeForum","preventDefault","viewGrade"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/grades/grader\n * @package    mod_forum\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport Templates from 'core/templates';\nimport * as Grader from '../local/grades/grader';\nimport Notification from 'core/notification';\nimport CourseRepository from 'core_course/repository';\nimport {relativeUrl} from 'core/url';\n\nconst templateNames = {\n    contentRegion: 'mod_forum/grades/grader/discussion/posts',\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch a users content.\n *\n * @param {Number} cmid\n * @param {Bool} experimentalDisplayMode\n * @return {Function}\n */\nconst getContentForUserIdFunction = (cmid, experimentalDisplayMode) => (userid) => {\n    /**\n     * Given the parent function is called with the second param set execute the partially executed function.\n     *\n     * @param {Number} userid\n     */\n    return Repository.getDiscussionByUserID(userid, cmid)\n        .then(context => {\n            // Rebuild the returned data for the template.\n            context.discussions = context.discussions.map(discussionPostMapper);\n            context.experimentaldisplaymode = experimentalDisplayMode ? true : false;\n\n            return Templates.render(templateNames.contentRegion, context);\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\n * The function curried fetches all users in a course for a given CMID.\n *\n * @param {Number} cmid\n * @param {Number} groupID\n * @return {Array} Array of users for a given context.\n */\nconst getUsersForCmidFunction = (cmid, groupID) => async() => {\n    const context = await CourseRepository.getUsersFromCourseModuleID(cmid, groupID);\n\n    return context.users;\n};\n\n\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\n\n/**\n * For a discussion we need to manipulate it's posts to hide certain UI elements.\n *\n * @param {Object} discussion\n * @return {Array} name, id, posts\n */\nconst discussionPostMapper = (discussion) => {\n    // Map postid => post.\n    const parentMap = new Map();\n    discussion.posts.parentposts.forEach(post => parentMap.set(post.id, post));\n    const userPosts = discussion.posts.userposts.map(post => {\n        post.readonly = true;\n        post.hasreplies = false;\n        post.replies = [];\n\n        const parent = post.parentid ? parentMap.get(post.parentid) : null;\n        if (parent) {\n            parent.hasreplies = false;\n            parent.replies = [];\n            parent.readonly = true;\n            post.parentauthorname = parent.author.fullname;\n        }\n\n        return {\n            parent,\n            post\n        };\n    });\n\n    return {\n        ...discussion,\n        posts: userPosts,\n    };\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n */\nconst launchWholeForumGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    const groupID = data.group ? data.group : 0;\n\n    await Grader.launch(\n        getUsersForCmidFunction(data.cmid, groupID),\n        getContentForUserIdFunction(data.cmid, data.experimentalDisplayMode == \"1\"),\n        gradingPanelFunctions.getter,\n        gradingPanelFunctions.setter,\n        {\n            groupid: data.groupid,\n            initialUserId: data.initialuserid,\n            moduleName: data.name,\n            courseName: data.courseName,\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\n            sendStudentNotifications: data.sendStudentNotifications,\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n */\nconst launchViewGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    await Grader.view(\n        gradingPanelFunctions.getter,\n        data.userid,\n        data.name,\n        {\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Register listeners to launch the grading panel.\n */\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchWholeForumGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n        if (e.target.matches(Selectors.viewGrade)) {\n            e.preventDefault();\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchViewGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"file":"grader.min.js"}